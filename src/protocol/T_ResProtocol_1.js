//------------------------------------------------------------------------------
// <auto-generated> 
// Copyright Â© Giga Factory 2023
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

function itemStackable(args) {
  if (!args) return [];
  return Object.values(args);
}

class AccountLogin {
  constructor(platformType, platformId, userId, deviceType, isLeave) {
     this.msg = [platformType, platformId, userId, deviceType, isLeave];
  }
  make() {
      return this.msg;
  }
}

class UserLogin {
  constructor(user, itemStackable, stage) {
     this.user = user;
     this.itemStackable = itemStackable;
     this.stage = stage;
  }
  make() {
    let user = this.user? Object.values(this.user) : [];
    let item = this.itemStackable;
    let stage = this.stage? Object.values(this.stage) : [];

    return [user, Object.values(item[0]), Object.values(item[1]), stage];
  }
}

class RoomInfo {
    constructor(roomKey, player_info_list) {
        this.roomKey = roomKey;
        this.player_info_list = player_info_list;
    }
    make() {
      let p1 = Object.values(this.player_info_list[0]);
      let p2 = this.player_info_list[1]? Object.values(this.player_info_list[1]) : [];
      return [this.roomKey, p1, p2];
    }
}

class RandomMatchPlayStart {
    constructor(roomKey, player_info_list) {
        this.roomKey = roomKey;
        this.player_info_list = player_info_list;
    }
    make() {
      let p1 = this.player_info_list[0]? Object.values(this.player_info_list[0]) : [];
      let p2 = this.player_info_list[1]? Object.values(this.player_info_list[1]) : [];
      return [this.roomKey, p1, p2];
    }
}

class RandomMatchPlayFinish {
    constructor(stage, itemStackable, my_rank) {
        this.my_rank = my_rank || -1;
        this.stage = stage || [];
        this.itemStackable = itemStackable || [];
    }
    make() {
      let p1 = this.itemStackable[0]? Object.values(this.itemStackable[0]) : [];
      let p2 = this.itemStackable[1]? Object.values(this.itemStackable[1]) : [];
      return [this.my_rank, Object.values(this.stage), p1, p2];
    }
}

class FriendPlayStart {
  constructor(roomKey, playerInfoList) {
    this.roomKey = roomKey;
    this.playerInfoList = playerInfoList;
 }
 make() {
  let p1 = Object.values(this.playerInfoList[0]);
  let p2 = this.playerInfoList[1]? Object.values(this.playerInfoList[1]) : [];
  return [this.roomKey, p1, p2];
}
}

class FriendPlayFinish {
  constructor(stage, itemStackable, myRank) {
    this.myRank = myRank || -1;
    this.stage = stage || [];
    this.itemStackable = itemStackable || [];
 }
 make() {
  return [this.myRank, Object.values(this.stage), Object.values(this.itemStackable[0]), Object.values(this.itemStackable[1])];
}
}

class ForcePlayOut {}

class MailList {
  constructor(mailList) {
    this.mailList = mailList;
 }
}

module.exports = {
  AccountLogin,
  UserLogin,
    RoomInfo,
    RandomMatchPlayStart,
    RandomMatchPlayFinish,
  FriendPlayStart,
  FriendPlayFinish,
  ForcePlayOut,
  MailList,
}
